name: CMake Matrix Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86_64
          - os: windows
            arch: x86_64
            compiler: msvc
            runner: windows-latest
          - os: windows
            arch: x86_64
            compiler: clang
            runner: windows-latest
          - os: windows
            arch: x86_64
            compiler: mingw
            runner: windows-latest

          # Windows x86
          - os: windows
            arch: x86
            compiler: msvc
            runner: windows-latest
          - os: windows
            arch: x86
            compiler: clang
            runner: windows-latest
          - os: windows
            arch: x86
            compiler: mingw
            runner: windows-latest

          # Linux x86_64
          - os: linux
            arch: x86_64
            compiler: gcc
            runner: ubuntu-latest
          - os: linux
            arch: x86_64
            compiler: clang
            runner: ubuntu-latest

          # Linux x86 (32-bit)
          - os: linux
            arch: x86
            compiler: gcc
            runner: ubuntu-latest
          - os: linux
            arch: x86
            compiler: clang
            runner: ubuntu-latest

          # Linux aarch64 (cross-compilation)
          - os: linux
            arch: aarch64
            compiler: gcc
            runner: ubuntu-latest
          - os: linux
            arch: aarch64
            compiler: clang
            runner: ubuntu-latest

          # macOS
          - os: macos
            arch: x86_64
            compiler: clang
            runner: macos-latest
          - os: macos
            arch: aarch64
            compiler: clang
            runner: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ clang g++-multilib gcc-multilib \
            cmake ninja-build qemu-user-static gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            ${{ steps.set-env.outputs.cmake_flags }}

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Set CMake Flags
        id: set-env
        run: |
          echo "cmake_flags=$(${{
            matrix.compiler == 'gcc' && (
              matrix.arch == 'x86' && echo "-DCMAKE_C_COMPILER=gcc -m32 -DCMAKE_CXX_COMPILER=g++ -m32"
              || matrix.arch == 'aarch64' && echo "-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
              || echo "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"
            ) || matrix.compiler == 'clang' && (
              matrix.arch == 'x86' && echo "-DCMAKE_C_COMPILER=clang -m32 -DCMAKE_CXX_COMPILER=clang++ -m32"
              || matrix.arch == 'aarch64' && echo "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -target aarch64-linux-gnu"
              || echo "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
            ) || matrix.compiler == 'mingw' && (
              matrix.arch == 'x86_64' && echo "-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++"
              || matrix.arch == 'x86' && echo "-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++"
            ) || echo ""
          }}" >> $GITHUB_OUTPUT


